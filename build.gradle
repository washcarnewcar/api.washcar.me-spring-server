plugins {
    id 'java'
    id 'org.springframework.boot' version '3.0.1'
    id 'io.spring.dependency-management' version '1.1.0'
    id "com.google.osdetector" version "1.7.3"
}

group = 'me.washcar'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}


dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    // database
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    runtimeOnly 'com.mysql:mysql-connector-j'

    // security
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    implementation 'org.springframework.boot:spring-boot-starter-security'

    // https://mvnrepository.com/artifact/org.hibernate/hibernate-validator
    implementation group: 'org.hibernate', name: 'hibernate-validator', version: '8.0.0.Final'

    // https://mvnrepository.com/artifact/org.modelmapper/modelmapper
    implementation group: 'org.modelmapper', name: 'modelmapper', version: '3.1.1'

    // spring reactive web (To use WebClient)
    implementation 'org.springframework.boot:spring-boot-starter-webflux'

    // Apple Silicon Mac에서는 io.netty.resolver를 찾지 못하는 에러 발생하여 Apple Silicon 용 라이브러리를 넣어줍니다.
    if (osdetector.arch == "aarch_64") {
        implementation 'io.netty:netty-resolver-dns-native-macos:4.1.89.Final:osx-aarch_64'
    }

    // JWT Libraries
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

    // lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'

    // spring configuration processor (To use ConfigurationProperties)
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"

    // jasypt (To encrypt properties)
    implementation 'com.github.ulisesbocchio:jasypt-spring-boot-starter:3.0.5'

}
tasks.named('test') {
    useJUnitPlatform()
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed"
    }
}
